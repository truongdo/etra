#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2016 Truong Do <truongdq54@gmail.com>
#
# Distributed under terms of the MIT license.

"""

"""
from __future__ import print_function
import optparse
import chainer
from chainer import Variable
import chainer.cuda as cuda
from etra.utils.gpu import get_gpu_available
import chainer.links as L
import chainer.optimizers as optimizers
import chainer.functions as F
import os
import sys
import numpy as np
import random
import chainer.computational_graph as c
from etra.model.nmt import ATT_NMT
from etra.io.feat import FeatReader

parser = optparse.OptionParser("""This program performs nnet forward given input features.

Usages:
forward-nmt data-dir model-dir out-dir
""")
parser.add_option("--gpu", help="GPU (default auto)", default="auto")

opts, args = parser.parse_args()

if (not args) or (len(args) != 3):
    parser.print_help()
    exit(1)

gpu = opts.gpu
if gpu == "auto":
    gpu = get_gpu_available()
else:
    gpu = int(gpu)

if gpu < 0:
    print("Use CPU")
else:
    print("Use GPU", gpu)


xp = cuda.cupy if gpu >= 0 else np

dat_dir = args[0]
in_model = args[1]
out_dir = args[2]

if __name__ == "__main__":
    src_feat_fname = os.path.join(dat_dir, "feat_src.scp")
    trg_feat_fname = os.path.join(dat_dir, "feat_trg.scp")
    nnet = ATT_NMT.load(in_model)
    nnet.train = False
    if opts.gpu >=0:
        cuda.get_device(opts.gpu).use()
        nnet.to_gpu()

    with FeatReader(src_feat_fname, data_type=np.int32) as fin_src, \
            FeatReader(trg_feat_fname, data_type=np.int32) as fin_trg:
        total_loss = 0
        for bidx, (name, src_feat) in enumerate(fin_src.read_all(shuffle=True)):
            trg_feat = fin_trg.read(name)
            nnet.reset()
            nnet.encode(src_feat)
            t = Variable(xp.zeros(trg_feat.shape[0], dtype=np.int32), volatile='auto')
            sen_loss = 0
            for i in xrange(trg_feat.shape[1]):
                t = nnet.trg_emb(t)
                o = nnet.decode(t)
                t = Variable(xp.asarray(trg_feat[: , i], dtype=np.int32), volatile='auto')
                loss_i = F.softmax_cross_entropy(o, t)
                sen_loss += loss_i.data
            total_loss += (sen_loss / trg_feat.shape[1])
        print(total_loss / (bidx + 1 ))
