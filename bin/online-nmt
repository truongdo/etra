#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2016 Truong Do <truongdq54@gmail.com>
#
# Distributed under terms of the MIT license.

"""

"""
from __future__ import print_function
import optparse
import chainer
from chainer import Variable
import chainer.cuda as cuda
import chainer.links as L
import chainer.optimizers as optimizers
import chainer.functions as F
import os
import codecs
from etra.ling import load_vocab
from etra.io import smart_open
import sys
import numpy as np
import random
import chainer.computational_graph as c
from etra.model.nmt import ATT_NMT
from etra.io.feat import FeatReader, FeatWriter

parser = optparse.OptionParser("""This program perform online machine translation that takes
input source language sentences and output the translated ones.

Usages:
%s text-file lang-dir model-dir output-file

Where text-file and output-file can be stdin and stdout.

Examples:
echo "how are you" | %s - lang-dir model-dir -
""" % (sys.argv[0], sys.argv[0]))
parser.add_option("--gpu", help="GPU", default=-1, type=int)
parser.add_option("--max-len", help="Max generation length (default 50)", default=50, type=int)
opts, args = parser.parse_args()

if (not args) or (len(args) != 4):
    parser.print_help()
    exit(1)

xp = cuda.cupy if opts.gpu >= 0 else np

text_fname = args[0]
lang_dir = args[1]
in_model = args[2]
output_fname = args[3]

trg_vocab = load_vocab(os.path.join(lang_dir, "trg.vocab"))
src_vocab = load_vocab(os.path.join(lang_dir, "src.vocab"))
reverse_vocab_trg = {x: y for y, x in trg_vocab.items()}
reverse_vocab_src = {x: y for y, x in src_vocab.items()}
word2idx = lambda x, vocab: vocab[x] if x in vocab else vocab["<unk>"]

if __name__ == "__main__":
    nnet = ATT_NMT.load(in_model)
    nnet.train = False
    if opts.gpu >=0:
        cuda.get_device(opts.gpu).use()
        nnet.to_gpu()

    with smart_open(text_fname) as fin, \
        smart_open(output_fname, "w") as fout:
        
        for line in fin:
            line = line.strip()
            src_vec = [src_vocab["<s>"]] + [word2idx(w, src_vocab) for w in line.split()] + [src_vocab["</s>"]]
            src_vec = xp.asarray([src_vec], dtype=np.int32)

            total_loss = 0
            nnet.reset()
            nnet.encode(src_vec)
            t = Variable(xp.zeros(1, dtype=np.int32), volatile='auto')
            output = []
            for i in xrange(opts.max_len):
                t = nnet.trg_emb(t)
                t, weight = nnet.decode(t, oweight=True)
                weight = weight.data[0]
                att = np.argmax(weight)
                src_w = reverse_vocab_src[src_vec[0][att]]
                t = xp.asarray(t.data.argmax(axis=1), dtype=np.int32)
                trg_w = reverse_vocab_trg[t[0]]
                if trg_w == "<unk>":
                    trg_w = src_w
                output.append(trg_w)
                if t[0] == trg_vocab["</s>"]:
                    break
            text = " ".join(output[1:-1])
            fout.write(text)
